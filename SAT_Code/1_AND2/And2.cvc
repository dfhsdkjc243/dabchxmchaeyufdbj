LUTf0_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
LUTf0_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
LUTf0_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
LUTf0_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
LUTf1_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
LUTf1_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
f0type, f1type, f2type, f3type : BITVECTOR(2);
f0input_0_0, f1input_0_0, f2input_0_0, f3input_0_0: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_0_0[0:0] = 0bin0) ELSE (f0input_0_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_0_0[1:1] = 0bin0) ELSE (f0input_0_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_0_0[0:0] = 0bin0) ELSE (f1input_0_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_0_0[1:1] = 0bin0) ELSE (f1input_0_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_0_0[0:0] = 0bin0) ELSE (f2input_0_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_0_0[1:1] = 0bin0) ELSE (f2input_0_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_0_0[0:0] = 0bin0) ELSE (f3input_0_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_0_0[1:1] = 0bin0) ELSE (f3input_0_0[1:1] = 0bin0)  ENDIF );
cascadef01_0_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_0_0] @ LUTf0_0[f0input_0_0]  = 0bin00 THEN cascadef01_0_0[0bin00] = 0bin1 ELSE cascadef01_0_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_0] @ LUTf0_0[f0input_0_0]  = 0bin01 THEN cascadef01_0_0[0bin01] = 0bin1 ELSE cascadef01_0_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_0] @ LUTf0_0[f0input_0_0]  = 0bin10 THEN cascadef01_0_0[0bin10] = 0bin1 ELSE cascadef01_0_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_0] @ LUTf0_0[f0input_0_0]  = 0bin11 THEN cascadef01_0_0[0bin11] = 0bin1 ELSE cascadef01_0_0[0bin11] = 0bin0 ENDIF );
cascadef23_0_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_0_0] @ LUTf0_2[f2input_0_0]  = 0bin00 THEN cascadef23_0_0[0bin00] = 0bin1 ELSE cascadef23_0_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_0] @ LUTf0_2[f2input_0_0]  = 0bin01 THEN cascadef23_0_0[0bin01] = 0bin1 ELSE cascadef23_0_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_0] @ LUTf0_2[f2input_0_0]  = 0bin10 THEN cascadef23_0_0[0bin10] = 0bin1 ELSE cascadef23_0_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_0] @ LUTf0_2[f2input_0_0]  = 0bin11 THEN cascadef23_0_0[0bin11] = 0bin1 ELSE cascadef23_0_0[0bin11] = 0bin0 ENDIF );
outf01_0_0, outf23_0_0: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_0_0] @ LUTf0_0[f0input_0_0]] = outf01_0_0 );
ASSERT(LUTf1_1[LUTf0_3[f3input_0_0] @ LUTf0_2[f2input_0_0]] = outf23_0_0 );
ASSERT( BVXOR( outf01_0_0, outf23_0_0 ) = 0bin0 );
f0input_0_1, f1input_0_1, f2input_0_1, f3input_0_1: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_0_1[0:0] = 0bin1) ELSE (f0input_0_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_0_1[1:1] = 0bin0) ELSE (f0input_0_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_0_1[0:0] = 0bin1) ELSE (f1input_0_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_0_1[1:1] = 0bin0) ELSE (f1input_0_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_0_1[0:0] = 0bin1) ELSE (f2input_0_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_0_1[1:1] = 0bin0) ELSE (f2input_0_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_0_1[0:0] = 0bin1) ELSE (f3input_0_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_0_1[1:1] = 0bin0) ELSE (f3input_0_1[1:1] = 0bin0)  ENDIF );
cascadef01_0_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_0_1] @ LUTf0_0[f0input_0_1]  = 0bin00 THEN cascadef01_0_1[0bin00] = 0bin1 ELSE cascadef01_0_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_1] @ LUTf0_0[f0input_0_1]  = 0bin01 THEN cascadef01_0_1[0bin01] = 0bin1 ELSE cascadef01_0_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_1] @ LUTf0_0[f0input_0_1]  = 0bin10 THEN cascadef01_0_1[0bin10] = 0bin1 ELSE cascadef01_0_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_1] @ LUTf0_0[f0input_0_1]  = 0bin11 THEN cascadef01_0_1[0bin11] = 0bin1 ELSE cascadef01_0_1[0bin11] = 0bin0 ENDIF );
cascadef23_0_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_0_1] @ LUTf0_2[f2input_0_1]  = 0bin00 THEN cascadef23_0_1[0bin00] = 0bin1 ELSE cascadef23_0_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_1] @ LUTf0_2[f2input_0_1]  = 0bin01 THEN cascadef23_0_1[0bin01] = 0bin1 ELSE cascadef23_0_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_1] @ LUTf0_2[f2input_0_1]  = 0bin10 THEN cascadef23_0_1[0bin10] = 0bin1 ELSE cascadef23_0_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_1] @ LUTf0_2[f2input_0_1]  = 0bin11 THEN cascadef23_0_1[0bin11] = 0bin1 ELSE cascadef23_0_1[0bin11] = 0bin0 ENDIF );
outf01_0_1, outf23_0_1: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_0_1] @ LUTf0_0[f0input_0_1]] = outf01_0_1 );
ASSERT(LUTf1_1[LUTf0_3[f3input_0_1] @ LUTf0_2[f2input_0_1]] = outf23_0_1 );
ASSERT( BVXOR( outf01_0_1, outf23_0_1 ) = 0bin0 );
f0input_0_2, f1input_0_2, f2input_0_2, f3input_0_2: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_0_2[0:0] = 0bin0) ELSE (f0input_0_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_0_2[1:1] = 0bin1) ELSE (f0input_0_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_0_2[0:0] = 0bin0) ELSE (f1input_0_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_0_2[1:1] = 0bin1) ELSE (f1input_0_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_0_2[0:0] = 0bin0) ELSE (f2input_0_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_0_2[1:1] = 0bin1) ELSE (f2input_0_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_0_2[0:0] = 0bin0) ELSE (f3input_0_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_0_2[1:1] = 0bin1) ELSE (f3input_0_2[1:1] = 0bin1)  ENDIF );
cascadef01_0_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_0_2] @ LUTf0_0[f0input_0_2]  = 0bin00 THEN cascadef01_0_2[0bin00] = 0bin1 ELSE cascadef01_0_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_2] @ LUTf0_0[f0input_0_2]  = 0bin01 THEN cascadef01_0_2[0bin01] = 0bin1 ELSE cascadef01_0_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_2] @ LUTf0_0[f0input_0_2]  = 0bin10 THEN cascadef01_0_2[0bin10] = 0bin1 ELSE cascadef01_0_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_2] @ LUTf0_0[f0input_0_2]  = 0bin11 THEN cascadef01_0_2[0bin11] = 0bin1 ELSE cascadef01_0_2[0bin11] = 0bin0 ENDIF );
cascadef23_0_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_0_2] @ LUTf0_2[f2input_0_2]  = 0bin00 THEN cascadef23_0_2[0bin00] = 0bin1 ELSE cascadef23_0_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_2] @ LUTf0_2[f2input_0_2]  = 0bin01 THEN cascadef23_0_2[0bin01] = 0bin1 ELSE cascadef23_0_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_2] @ LUTf0_2[f2input_0_2]  = 0bin10 THEN cascadef23_0_2[0bin10] = 0bin1 ELSE cascadef23_0_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_2] @ LUTf0_2[f2input_0_2]  = 0bin11 THEN cascadef23_0_2[0bin11] = 0bin1 ELSE cascadef23_0_2[0bin11] = 0bin0 ENDIF );
outf01_0_2, outf23_0_2: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_0_2] @ LUTf0_0[f0input_0_2]] = outf01_0_2 );
ASSERT(LUTf1_1[LUTf0_3[f3input_0_2] @ LUTf0_2[f2input_0_2]] = outf23_0_2 );
ASSERT( BVXOR( outf01_0_2, outf23_0_2 ) = 0bin0 );
f0input_0_3, f1input_0_3, f2input_0_3, f3input_0_3: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_0_3[0:0] = 0bin1) ELSE (f0input_0_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_0_3[1:1] = 0bin1) ELSE (f0input_0_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_0_3[0:0] = 0bin1) ELSE (f1input_0_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_0_3[1:1] = 0bin1) ELSE (f1input_0_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_0_3[0:0] = 0bin1) ELSE (f2input_0_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_0_3[1:1] = 0bin1) ELSE (f2input_0_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_0_3[0:0] = 0bin1) ELSE (f3input_0_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_0_3[1:1] = 0bin1) ELSE (f3input_0_3[1:1] = 0bin1)  ENDIF );
cascadef01_0_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_0_3] @ LUTf0_0[f0input_0_3]  = 0bin00 THEN cascadef01_0_3[0bin00] = 0bin1 ELSE cascadef01_0_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_3] @ LUTf0_0[f0input_0_3]  = 0bin01 THEN cascadef01_0_3[0bin01] = 0bin1 ELSE cascadef01_0_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_3] @ LUTf0_0[f0input_0_3]  = 0bin10 THEN cascadef01_0_3[0bin10] = 0bin1 ELSE cascadef01_0_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_0_3] @ LUTf0_0[f0input_0_3]  = 0bin11 THEN cascadef01_0_3[0bin11] = 0bin1 ELSE cascadef01_0_3[0bin11] = 0bin0 ENDIF );
cascadef23_0_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_0_3] @ LUTf0_2[f2input_0_3]  = 0bin00 THEN cascadef23_0_3[0bin00] = 0bin1 ELSE cascadef23_0_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_3] @ LUTf0_2[f2input_0_3]  = 0bin01 THEN cascadef23_0_3[0bin01] = 0bin1 ELSE cascadef23_0_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_3] @ LUTf0_2[f2input_0_3]  = 0bin10 THEN cascadef23_0_3[0bin10] = 0bin1 ELSE cascadef23_0_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_0_3] @ LUTf0_2[f2input_0_3]  = 0bin11 THEN cascadef23_0_3[0bin11] = 0bin1 ELSE cascadef23_0_3[0bin11] = 0bin0 ENDIF );
outf01_0_3, outf23_0_3: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_0_3] @ LUTf0_0[f0input_0_3]] = outf01_0_3 );
ASSERT(LUTf1_1[LUTf0_3[f3input_0_3] @ LUTf0_2[f2input_0_3]] = outf23_0_3 );
ASSERT( BVXOR( outf01_0_3, outf23_0_3 ) = 0bin0 );
cascadef01_0 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef01_0[0bin00] = BVPLUS( 4 , 0bin000@cascadef01_0_0[0bin00] , 0bin000@cascadef01_0_1[0bin00] , 0bin000@cascadef01_0_2[0bin00] , 0bin000@cascadef01_0_3[0bin00] ));
ASSERT( cascadef01_0[0bin01] = BVPLUS( 4 , 0bin000@cascadef01_0_0[0bin01] , 0bin000@cascadef01_0_1[0bin01] , 0bin000@cascadef01_0_2[0bin01] , 0bin000@cascadef01_0_3[0bin01] ));
ASSERT( cascadef01_0[0bin10] = BVPLUS( 4 , 0bin000@cascadef01_0_0[0bin10] , 0bin000@cascadef01_0_1[0bin10] , 0bin000@cascadef01_0_2[0bin10] , 0bin000@cascadef01_0_3[0bin10] ));
ASSERT( cascadef01_0[0bin11] = BVPLUS( 4 , 0bin000@cascadef01_0_0[0bin11] , 0bin000@cascadef01_0_1[0bin11] , 0bin000@cascadef01_0_2[0bin11] , 0bin000@cascadef01_0_3[0bin11] ));
cascadef23_0 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef23_0[0bin00] = BVPLUS( 4 , 0bin000@cascadef23_0_0[0bin00] , 0bin000@cascadef23_0_1[0bin00] , 0bin000@cascadef23_0_2[0bin00] , 0bin000@cascadef23_0_3[0bin00] ));
ASSERT( cascadef23_0[0bin01] = BVPLUS( 4 , 0bin000@cascadef23_0_0[0bin01] , 0bin000@cascadef23_0_1[0bin01] , 0bin000@cascadef23_0_2[0bin01] , 0bin000@cascadef23_0_3[0bin01] ));
ASSERT( cascadef23_0[0bin10] = BVPLUS( 4 , 0bin000@cascadef23_0_0[0bin10] , 0bin000@cascadef23_0_1[0bin10] , 0bin000@cascadef23_0_2[0bin10] , 0bin000@cascadef23_0_3[0bin10] ));
ASSERT( cascadef23_0[0bin11] = BVPLUS( 4 , 0bin000@cascadef23_0_0[0bin11] , 0bin000@cascadef23_0_1[0bin11] , 0bin000@cascadef23_0_2[0bin11] , 0bin000@cascadef23_0_3[0bin11] ));
f0input_1_0, f1input_1_0, f2input_1_0, f3input_1_0: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_1_0[0:0] = 0bin0) ELSE (f0input_1_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_1_0[1:1] = 0bin0) ELSE (f0input_1_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_1_0[0:0] = 0bin0) ELSE (f1input_1_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_1_0[1:1] = 0bin0) ELSE (f1input_1_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_1_0[0:0] = 0bin0) ELSE (f2input_1_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_1_0[1:1] = 0bin0) ELSE (f2input_1_0[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_1_0[0:0] = 0bin0) ELSE (f3input_1_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_1_0[1:1] = 0bin0) ELSE (f3input_1_0[1:1] = 0bin0)  ENDIF );
cascadef01_1_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_1_0] @ LUTf0_0[f0input_1_0]  = 0bin00 THEN cascadef01_1_0[0bin00] = 0bin1 ELSE cascadef01_1_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_0] @ LUTf0_0[f0input_1_0]  = 0bin01 THEN cascadef01_1_0[0bin01] = 0bin1 ELSE cascadef01_1_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_0] @ LUTf0_0[f0input_1_0]  = 0bin10 THEN cascadef01_1_0[0bin10] = 0bin1 ELSE cascadef01_1_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_0] @ LUTf0_0[f0input_1_0]  = 0bin11 THEN cascadef01_1_0[0bin11] = 0bin1 ELSE cascadef01_1_0[0bin11] = 0bin0 ENDIF );
cascadef23_1_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_1_0] @ LUTf0_2[f2input_1_0]  = 0bin00 THEN cascadef23_1_0[0bin00] = 0bin1 ELSE cascadef23_1_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_0] @ LUTf0_2[f2input_1_0]  = 0bin01 THEN cascadef23_1_0[0bin01] = 0bin1 ELSE cascadef23_1_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_0] @ LUTf0_2[f2input_1_0]  = 0bin10 THEN cascadef23_1_0[0bin10] = 0bin1 ELSE cascadef23_1_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_0] @ LUTf0_2[f2input_1_0]  = 0bin11 THEN cascadef23_1_0[0bin11] = 0bin1 ELSE cascadef23_1_0[0bin11] = 0bin0 ENDIF );
outf01_1_0, outf23_1_0: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_1_0] @ LUTf0_0[f0input_1_0]] = outf01_1_0 );
ASSERT(LUTf1_1[LUTf0_3[f3input_1_0] @ LUTf0_2[f2input_1_0]] = outf23_1_0 );
ASSERT( BVXOR( outf01_1_0, outf23_1_0 ) = 0bin0 );
f0input_1_1, f1input_1_1, f2input_1_1, f3input_1_1: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_1_1[0:0] = 0bin1) ELSE (f0input_1_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_1_1[1:1] = 0bin0) ELSE (f0input_1_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_1_1[0:0] = 0bin1) ELSE (f1input_1_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_1_1[1:1] = 0bin0) ELSE (f1input_1_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_1_1[0:0] = 0bin1) ELSE (f2input_1_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_1_1[1:1] = 0bin0) ELSE (f2input_1_1[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_1_1[0:0] = 0bin1) ELSE (f3input_1_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_1_1[1:1] = 0bin0) ELSE (f3input_1_1[1:1] = 0bin0)  ENDIF );
cascadef01_1_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_1_1] @ LUTf0_0[f0input_1_1]  = 0bin00 THEN cascadef01_1_1[0bin00] = 0bin1 ELSE cascadef01_1_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_1] @ LUTf0_0[f0input_1_1]  = 0bin01 THEN cascadef01_1_1[0bin01] = 0bin1 ELSE cascadef01_1_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_1] @ LUTf0_0[f0input_1_1]  = 0bin10 THEN cascadef01_1_1[0bin10] = 0bin1 ELSE cascadef01_1_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_1] @ LUTf0_0[f0input_1_1]  = 0bin11 THEN cascadef01_1_1[0bin11] = 0bin1 ELSE cascadef01_1_1[0bin11] = 0bin0 ENDIF );
cascadef23_1_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_1_1] @ LUTf0_2[f2input_1_1]  = 0bin00 THEN cascadef23_1_1[0bin00] = 0bin1 ELSE cascadef23_1_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_1] @ LUTf0_2[f2input_1_1]  = 0bin01 THEN cascadef23_1_1[0bin01] = 0bin1 ELSE cascadef23_1_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_1] @ LUTf0_2[f2input_1_1]  = 0bin10 THEN cascadef23_1_1[0bin10] = 0bin1 ELSE cascadef23_1_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_1] @ LUTf0_2[f2input_1_1]  = 0bin11 THEN cascadef23_1_1[0bin11] = 0bin1 ELSE cascadef23_1_1[0bin11] = 0bin0 ENDIF );
outf01_1_1, outf23_1_1: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_1_1] @ LUTf0_0[f0input_1_1]] = outf01_1_1 );
ASSERT(LUTf1_1[LUTf0_3[f3input_1_1] @ LUTf0_2[f2input_1_1]] = outf23_1_1 );
ASSERT( BVXOR( outf01_1_1, outf23_1_1 ) = 0bin0 );
f0input_1_2, f1input_1_2, f2input_1_2, f3input_1_2: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_1_2[0:0] = 0bin0) ELSE (f0input_1_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_1_2[1:1] = 0bin1) ELSE (f0input_1_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_1_2[0:0] = 0bin0) ELSE (f1input_1_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_1_2[1:1] = 0bin1) ELSE (f1input_1_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_1_2[0:0] = 0bin0) ELSE (f2input_1_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_1_2[1:1] = 0bin1) ELSE (f2input_1_2[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_1_2[0:0] = 0bin0) ELSE (f3input_1_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_1_2[1:1] = 0bin1) ELSE (f3input_1_2[1:1] = 0bin1)  ENDIF );
cascadef01_1_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_1_2] @ LUTf0_0[f0input_1_2]  = 0bin00 THEN cascadef01_1_2[0bin00] = 0bin1 ELSE cascadef01_1_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_2] @ LUTf0_0[f0input_1_2]  = 0bin01 THEN cascadef01_1_2[0bin01] = 0bin1 ELSE cascadef01_1_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_2] @ LUTf0_0[f0input_1_2]  = 0bin10 THEN cascadef01_1_2[0bin10] = 0bin1 ELSE cascadef01_1_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_2] @ LUTf0_0[f0input_1_2]  = 0bin11 THEN cascadef01_1_2[0bin11] = 0bin1 ELSE cascadef01_1_2[0bin11] = 0bin0 ENDIF );
cascadef23_1_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_1_2] @ LUTf0_2[f2input_1_2]  = 0bin00 THEN cascadef23_1_2[0bin00] = 0bin1 ELSE cascadef23_1_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_2] @ LUTf0_2[f2input_1_2]  = 0bin01 THEN cascadef23_1_2[0bin01] = 0bin1 ELSE cascadef23_1_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_2] @ LUTf0_2[f2input_1_2]  = 0bin10 THEN cascadef23_1_2[0bin10] = 0bin1 ELSE cascadef23_1_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_2] @ LUTf0_2[f2input_1_2]  = 0bin11 THEN cascadef23_1_2[0bin11] = 0bin1 ELSE cascadef23_1_2[0bin11] = 0bin0 ENDIF );
outf01_1_2, outf23_1_2: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_1_2] @ LUTf0_0[f0input_1_2]] = outf01_1_2 );
ASSERT(LUTf1_1[LUTf0_3[f3input_1_2] @ LUTf0_2[f2input_1_2]] = outf23_1_2 );
ASSERT( BVXOR( outf01_1_2, outf23_1_2 ) = 0bin0 );
f0input_1_3, f1input_1_3, f2input_1_3, f3input_1_3: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_1_3[0:0] = 0bin1) ELSE (f0input_1_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_1_3[1:1] = 0bin1) ELSE (f0input_1_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_1_3[0:0] = 0bin1) ELSE (f1input_1_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_1_3[1:1] = 0bin1) ELSE (f1input_1_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_1_3[0:0] = 0bin1) ELSE (f2input_1_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_1_3[1:1] = 0bin1) ELSE (f2input_1_3[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_1_3[0:0] = 0bin1) ELSE (f3input_1_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_1_3[1:1] = 0bin1) ELSE (f3input_1_3[1:1] = 0bin1)  ENDIF );
cascadef01_1_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_1_3] @ LUTf0_0[f0input_1_3]  = 0bin00 THEN cascadef01_1_3[0bin00] = 0bin1 ELSE cascadef01_1_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_3] @ LUTf0_0[f0input_1_3]  = 0bin01 THEN cascadef01_1_3[0bin01] = 0bin1 ELSE cascadef01_1_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_3] @ LUTf0_0[f0input_1_3]  = 0bin10 THEN cascadef01_1_3[0bin10] = 0bin1 ELSE cascadef01_1_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_1_3] @ LUTf0_0[f0input_1_3]  = 0bin11 THEN cascadef01_1_3[0bin11] = 0bin1 ELSE cascadef01_1_3[0bin11] = 0bin0 ENDIF );
cascadef23_1_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_1_3] @ LUTf0_2[f2input_1_3]  = 0bin00 THEN cascadef23_1_3[0bin00] = 0bin1 ELSE cascadef23_1_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_3] @ LUTf0_2[f2input_1_3]  = 0bin01 THEN cascadef23_1_3[0bin01] = 0bin1 ELSE cascadef23_1_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_3] @ LUTf0_2[f2input_1_3]  = 0bin10 THEN cascadef23_1_3[0bin10] = 0bin1 ELSE cascadef23_1_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_1_3] @ LUTf0_2[f2input_1_3]  = 0bin11 THEN cascadef23_1_3[0bin11] = 0bin1 ELSE cascadef23_1_3[0bin11] = 0bin0 ENDIF );
outf01_1_3, outf23_1_3: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_1_3] @ LUTf0_0[f0input_1_3]] = outf01_1_3 );
ASSERT(LUTf1_1[LUTf0_3[f3input_1_3] @ LUTf0_2[f2input_1_3]] = outf23_1_3 );
ASSERT( BVXOR( outf01_1_3, outf23_1_3 ) = 0bin0 );
cascadef01_1 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef01_1[0bin00] = BVPLUS( 4 , 0bin000@cascadef01_1_0[0bin00] , 0bin000@cascadef01_1_1[0bin00] , 0bin000@cascadef01_1_2[0bin00] , 0bin000@cascadef01_1_3[0bin00] ));
ASSERT( cascadef01_1[0bin01] = BVPLUS( 4 , 0bin000@cascadef01_1_0[0bin01] , 0bin000@cascadef01_1_1[0bin01] , 0bin000@cascadef01_1_2[0bin01] , 0bin000@cascadef01_1_3[0bin01] ));
ASSERT( cascadef01_1[0bin10] = BVPLUS( 4 , 0bin000@cascadef01_1_0[0bin10] , 0bin000@cascadef01_1_1[0bin10] , 0bin000@cascadef01_1_2[0bin10] , 0bin000@cascadef01_1_3[0bin10] ));
ASSERT( cascadef01_1[0bin11] = BVPLUS( 4 , 0bin000@cascadef01_1_0[0bin11] , 0bin000@cascadef01_1_1[0bin11] , 0bin000@cascadef01_1_2[0bin11] , 0bin000@cascadef01_1_3[0bin11] ));
cascadef23_1 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef23_1[0bin00] = BVPLUS( 4 , 0bin000@cascadef23_1_0[0bin00] , 0bin000@cascadef23_1_1[0bin00] , 0bin000@cascadef23_1_2[0bin00] , 0bin000@cascadef23_1_3[0bin00] ));
ASSERT( cascadef23_1[0bin01] = BVPLUS( 4 , 0bin000@cascadef23_1_0[0bin01] , 0bin000@cascadef23_1_1[0bin01] , 0bin000@cascadef23_1_2[0bin01] , 0bin000@cascadef23_1_3[0bin01] ));
ASSERT( cascadef23_1[0bin10] = BVPLUS( 4 , 0bin000@cascadef23_1_0[0bin10] , 0bin000@cascadef23_1_1[0bin10] , 0bin000@cascadef23_1_2[0bin10] , 0bin000@cascadef23_1_3[0bin10] ));
ASSERT( cascadef23_1[0bin11] = BVPLUS( 4 , 0bin000@cascadef23_1_0[0bin11] , 0bin000@cascadef23_1_1[0bin11] , 0bin000@cascadef23_1_2[0bin11] , 0bin000@cascadef23_1_3[0bin11] ));
f0input_2_0, f1input_2_0, f2input_2_0, f3input_2_0: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_2_0[0:0] = 0bin0) ELSE (f0input_2_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_2_0[1:1] = 0bin0) ELSE (f0input_2_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_2_0[0:0] = 0bin0) ELSE (f1input_2_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_2_0[1:1] = 0bin0) ELSE (f1input_2_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_2_0[0:0] = 0bin0) ELSE (f2input_2_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_2_0[1:1] = 0bin0) ELSE (f2input_2_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_2_0[0:0] = 0bin0) ELSE (f3input_2_0[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_2_0[1:1] = 0bin0) ELSE (f3input_2_0[1:1] = 0bin1)  ENDIF );
cascadef01_2_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_2_0] @ LUTf0_0[f0input_2_0]  = 0bin00 THEN cascadef01_2_0[0bin00] = 0bin1 ELSE cascadef01_2_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_0] @ LUTf0_0[f0input_2_0]  = 0bin01 THEN cascadef01_2_0[0bin01] = 0bin1 ELSE cascadef01_2_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_0] @ LUTf0_0[f0input_2_0]  = 0bin10 THEN cascadef01_2_0[0bin10] = 0bin1 ELSE cascadef01_2_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_0] @ LUTf0_0[f0input_2_0]  = 0bin11 THEN cascadef01_2_0[0bin11] = 0bin1 ELSE cascadef01_2_0[0bin11] = 0bin0 ENDIF );
cascadef23_2_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_2_0] @ LUTf0_2[f2input_2_0]  = 0bin00 THEN cascadef23_2_0[0bin00] = 0bin1 ELSE cascadef23_2_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_0] @ LUTf0_2[f2input_2_0]  = 0bin01 THEN cascadef23_2_0[0bin01] = 0bin1 ELSE cascadef23_2_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_0] @ LUTf0_2[f2input_2_0]  = 0bin10 THEN cascadef23_2_0[0bin10] = 0bin1 ELSE cascadef23_2_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_0] @ LUTf0_2[f2input_2_0]  = 0bin11 THEN cascadef23_2_0[0bin11] = 0bin1 ELSE cascadef23_2_0[0bin11] = 0bin0 ENDIF );
outf01_2_0, outf23_2_0: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_2_0] @ LUTf0_0[f0input_2_0]] = outf01_2_0 );
ASSERT(LUTf1_1[LUTf0_3[f3input_2_0] @ LUTf0_2[f2input_2_0]] = outf23_2_0 );
ASSERT( BVXOR( outf01_2_0, outf23_2_0 ) = 0bin0 );
f0input_2_1, f1input_2_1, f2input_2_1, f3input_2_1: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_2_1[0:0] = 0bin1) ELSE (f0input_2_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_2_1[1:1] = 0bin0) ELSE (f0input_2_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_2_1[0:0] = 0bin1) ELSE (f1input_2_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_2_1[1:1] = 0bin0) ELSE (f1input_2_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_2_1[0:0] = 0bin1) ELSE (f2input_2_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_2_1[1:1] = 0bin0) ELSE (f2input_2_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_2_1[0:0] = 0bin1) ELSE (f3input_2_1[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_2_1[1:1] = 0bin0) ELSE (f3input_2_1[1:1] = 0bin1)  ENDIF );
cascadef01_2_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_2_1] @ LUTf0_0[f0input_2_1]  = 0bin00 THEN cascadef01_2_1[0bin00] = 0bin1 ELSE cascadef01_2_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_1] @ LUTf0_0[f0input_2_1]  = 0bin01 THEN cascadef01_2_1[0bin01] = 0bin1 ELSE cascadef01_2_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_1] @ LUTf0_0[f0input_2_1]  = 0bin10 THEN cascadef01_2_1[0bin10] = 0bin1 ELSE cascadef01_2_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_1] @ LUTf0_0[f0input_2_1]  = 0bin11 THEN cascadef01_2_1[0bin11] = 0bin1 ELSE cascadef01_2_1[0bin11] = 0bin0 ENDIF );
cascadef23_2_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_2_1] @ LUTf0_2[f2input_2_1]  = 0bin00 THEN cascadef23_2_1[0bin00] = 0bin1 ELSE cascadef23_2_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_1] @ LUTf0_2[f2input_2_1]  = 0bin01 THEN cascadef23_2_1[0bin01] = 0bin1 ELSE cascadef23_2_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_1] @ LUTf0_2[f2input_2_1]  = 0bin10 THEN cascadef23_2_1[0bin10] = 0bin1 ELSE cascadef23_2_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_1] @ LUTf0_2[f2input_2_1]  = 0bin11 THEN cascadef23_2_1[0bin11] = 0bin1 ELSE cascadef23_2_1[0bin11] = 0bin0 ENDIF );
outf01_2_1, outf23_2_1: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_2_1] @ LUTf0_0[f0input_2_1]] = outf01_2_1 );
ASSERT(LUTf1_1[LUTf0_3[f3input_2_1] @ LUTf0_2[f2input_2_1]] = outf23_2_1 );
ASSERT( BVXOR( outf01_2_1, outf23_2_1 ) = 0bin0 );
f0input_2_2, f1input_2_2, f2input_2_2, f3input_2_2: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_2_2[0:0] = 0bin0) ELSE (f0input_2_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_2_2[1:1] = 0bin1) ELSE (f0input_2_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_2_2[0:0] = 0bin0) ELSE (f1input_2_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_2_2[1:1] = 0bin1) ELSE (f1input_2_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_2_2[0:0] = 0bin0) ELSE (f2input_2_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_2_2[1:1] = 0bin1) ELSE (f2input_2_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_2_2[0:0] = 0bin0) ELSE (f3input_2_2[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_2_2[1:1] = 0bin1) ELSE (f3input_2_2[1:1] = 0bin0)  ENDIF );
cascadef01_2_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_2_2] @ LUTf0_0[f0input_2_2]  = 0bin00 THEN cascadef01_2_2[0bin00] = 0bin1 ELSE cascadef01_2_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_2] @ LUTf0_0[f0input_2_2]  = 0bin01 THEN cascadef01_2_2[0bin01] = 0bin1 ELSE cascadef01_2_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_2] @ LUTf0_0[f0input_2_2]  = 0bin10 THEN cascadef01_2_2[0bin10] = 0bin1 ELSE cascadef01_2_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_2] @ LUTf0_0[f0input_2_2]  = 0bin11 THEN cascadef01_2_2[0bin11] = 0bin1 ELSE cascadef01_2_2[0bin11] = 0bin0 ENDIF );
cascadef23_2_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_2_2] @ LUTf0_2[f2input_2_2]  = 0bin00 THEN cascadef23_2_2[0bin00] = 0bin1 ELSE cascadef23_2_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_2] @ LUTf0_2[f2input_2_2]  = 0bin01 THEN cascadef23_2_2[0bin01] = 0bin1 ELSE cascadef23_2_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_2] @ LUTf0_2[f2input_2_2]  = 0bin10 THEN cascadef23_2_2[0bin10] = 0bin1 ELSE cascadef23_2_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_2] @ LUTf0_2[f2input_2_2]  = 0bin11 THEN cascadef23_2_2[0bin11] = 0bin1 ELSE cascadef23_2_2[0bin11] = 0bin0 ENDIF );
outf01_2_2, outf23_2_2: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_2_2] @ LUTf0_0[f0input_2_2]] = outf01_2_2 );
ASSERT(LUTf1_1[LUTf0_3[f3input_2_2] @ LUTf0_2[f2input_2_2]] = outf23_2_2 );
ASSERT( BVXOR( outf01_2_2, outf23_2_2 ) = 0bin0 );
f0input_2_3, f1input_2_3, f2input_2_3, f3input_2_3: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_2_3[0:0] = 0bin1) ELSE (f0input_2_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_2_3[1:1] = 0bin1) ELSE (f0input_2_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_2_3[0:0] = 0bin1) ELSE (f1input_2_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_2_3[1:1] = 0bin1) ELSE (f1input_2_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_2_3[0:0] = 0bin1) ELSE (f2input_2_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_2_3[1:1] = 0bin1) ELSE (f2input_2_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_2_3[0:0] = 0bin1) ELSE (f3input_2_3[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_2_3[1:1] = 0bin1) ELSE (f3input_2_3[1:1] = 0bin0)  ENDIF );
cascadef01_2_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_2_3] @ LUTf0_0[f0input_2_3]  = 0bin00 THEN cascadef01_2_3[0bin00] = 0bin1 ELSE cascadef01_2_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_3] @ LUTf0_0[f0input_2_3]  = 0bin01 THEN cascadef01_2_3[0bin01] = 0bin1 ELSE cascadef01_2_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_3] @ LUTf0_0[f0input_2_3]  = 0bin10 THEN cascadef01_2_3[0bin10] = 0bin1 ELSE cascadef01_2_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_2_3] @ LUTf0_0[f0input_2_3]  = 0bin11 THEN cascadef01_2_3[0bin11] = 0bin1 ELSE cascadef01_2_3[0bin11] = 0bin0 ENDIF );
cascadef23_2_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_2_3] @ LUTf0_2[f2input_2_3]  = 0bin00 THEN cascadef23_2_3[0bin00] = 0bin1 ELSE cascadef23_2_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_3] @ LUTf0_2[f2input_2_3]  = 0bin01 THEN cascadef23_2_3[0bin01] = 0bin1 ELSE cascadef23_2_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_3] @ LUTf0_2[f2input_2_3]  = 0bin10 THEN cascadef23_2_3[0bin10] = 0bin1 ELSE cascadef23_2_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_2_3] @ LUTf0_2[f2input_2_3]  = 0bin11 THEN cascadef23_2_3[0bin11] = 0bin1 ELSE cascadef23_2_3[0bin11] = 0bin0 ENDIF );
outf01_2_3, outf23_2_3: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_2_3] @ LUTf0_0[f0input_2_3]] = outf01_2_3 );
ASSERT(LUTf1_1[LUTf0_3[f3input_2_3] @ LUTf0_2[f2input_2_3]] = outf23_2_3 );
ASSERT( BVXOR( outf01_2_3, outf23_2_3 ) = 0bin0 );
cascadef01_2 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef01_2[0bin00] = BVPLUS( 4 , 0bin000@cascadef01_2_0[0bin00] , 0bin000@cascadef01_2_1[0bin00] , 0bin000@cascadef01_2_2[0bin00] , 0bin000@cascadef01_2_3[0bin00] ));
ASSERT( cascadef01_2[0bin01] = BVPLUS( 4 , 0bin000@cascadef01_2_0[0bin01] , 0bin000@cascadef01_2_1[0bin01] , 0bin000@cascadef01_2_2[0bin01] , 0bin000@cascadef01_2_3[0bin01] ));
ASSERT( cascadef01_2[0bin10] = BVPLUS( 4 , 0bin000@cascadef01_2_0[0bin10] , 0bin000@cascadef01_2_1[0bin10] , 0bin000@cascadef01_2_2[0bin10] , 0bin000@cascadef01_2_3[0bin10] ));
ASSERT( cascadef01_2[0bin11] = BVPLUS( 4 , 0bin000@cascadef01_2_0[0bin11] , 0bin000@cascadef01_2_1[0bin11] , 0bin000@cascadef01_2_2[0bin11] , 0bin000@cascadef01_2_3[0bin11] ));
cascadef23_2 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef23_2[0bin00] = BVPLUS( 4 , 0bin000@cascadef23_2_0[0bin00] , 0bin000@cascadef23_2_1[0bin00] , 0bin000@cascadef23_2_2[0bin00] , 0bin000@cascadef23_2_3[0bin00] ));
ASSERT( cascadef23_2[0bin01] = BVPLUS( 4 , 0bin000@cascadef23_2_0[0bin01] , 0bin000@cascadef23_2_1[0bin01] , 0bin000@cascadef23_2_2[0bin01] , 0bin000@cascadef23_2_3[0bin01] ));
ASSERT( cascadef23_2[0bin10] = BVPLUS( 4 , 0bin000@cascadef23_2_0[0bin10] , 0bin000@cascadef23_2_1[0bin10] , 0bin000@cascadef23_2_2[0bin10] , 0bin000@cascadef23_2_3[0bin10] ));
ASSERT( cascadef23_2[0bin11] = BVPLUS( 4 , 0bin000@cascadef23_2_0[0bin11] , 0bin000@cascadef23_2_1[0bin11] , 0bin000@cascadef23_2_2[0bin11] , 0bin000@cascadef23_2_3[0bin11] ));
f0input_3_0, f1input_3_0, f2input_3_0, f3input_3_0: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_3_0[0:0] = 0bin0) ELSE (f0input_3_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_3_0[1:1] = 0bin0) ELSE (f0input_3_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_3_0[0:0] = 0bin0) ELSE (f1input_3_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_3_0[1:1] = 0bin0) ELSE (f1input_3_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_3_0[0:0] = 0bin0) ELSE (f2input_3_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_3_0[1:1] = 0bin0) ELSE (f2input_3_0[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_3_0[0:0] = 0bin0) ELSE (f3input_3_0[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_3_0[1:1] = 0bin0) ELSE (f3input_3_0[1:1] = 0bin1)  ENDIF );
cascadef01_3_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_3_0] @ LUTf0_0[f0input_3_0]  = 0bin00 THEN cascadef01_3_0[0bin00] = 0bin1 ELSE cascadef01_3_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_0] @ LUTf0_0[f0input_3_0]  = 0bin01 THEN cascadef01_3_0[0bin01] = 0bin1 ELSE cascadef01_3_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_0] @ LUTf0_0[f0input_3_0]  = 0bin10 THEN cascadef01_3_0[0bin10] = 0bin1 ELSE cascadef01_3_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_0] @ LUTf0_0[f0input_3_0]  = 0bin11 THEN cascadef01_3_0[0bin11] = 0bin1 ELSE cascadef01_3_0[0bin11] = 0bin0 ENDIF );
cascadef23_3_0 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_3_0] @ LUTf0_2[f2input_3_0]  = 0bin00 THEN cascadef23_3_0[0bin00] = 0bin1 ELSE cascadef23_3_0[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_0] @ LUTf0_2[f2input_3_0]  = 0bin01 THEN cascadef23_3_0[0bin01] = 0bin1 ELSE cascadef23_3_0[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_0] @ LUTf0_2[f2input_3_0]  = 0bin10 THEN cascadef23_3_0[0bin10] = 0bin1 ELSE cascadef23_3_0[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_0] @ LUTf0_2[f2input_3_0]  = 0bin11 THEN cascadef23_3_0[0bin11] = 0bin1 ELSE cascadef23_3_0[0bin11] = 0bin0 ENDIF );
outf01_3_0, outf23_3_0: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_3_0] @ LUTf0_0[f0input_3_0]] = outf01_3_0 );
ASSERT(LUTf1_1[LUTf0_3[f3input_3_0] @ LUTf0_2[f2input_3_0]] = outf23_3_0 );
ASSERT( BVXOR( outf01_3_0, outf23_3_0 ) = 0bin1 );
f0input_3_1, f1input_3_1, f2input_3_1, f3input_3_1: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_3_1[0:0] = 0bin1) ELSE (f0input_3_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_3_1[1:1] = 0bin0) ELSE (f0input_3_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_3_1[0:0] = 0bin1) ELSE (f1input_3_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_3_1[1:1] = 0bin0) ELSE (f1input_3_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_3_1[0:0] = 0bin1) ELSE (f2input_3_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_3_1[1:1] = 0bin0) ELSE (f2input_3_1[1:1] = 0bin1)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_3_1[0:0] = 0bin1) ELSE (f3input_3_1[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_3_1[1:1] = 0bin0) ELSE (f3input_3_1[1:1] = 0bin1)  ENDIF );
cascadef01_3_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_3_1] @ LUTf0_0[f0input_3_1]  = 0bin00 THEN cascadef01_3_1[0bin00] = 0bin1 ELSE cascadef01_3_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_1] @ LUTf0_0[f0input_3_1]  = 0bin01 THEN cascadef01_3_1[0bin01] = 0bin1 ELSE cascadef01_3_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_1] @ LUTf0_0[f0input_3_1]  = 0bin10 THEN cascadef01_3_1[0bin10] = 0bin1 ELSE cascadef01_3_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_1] @ LUTf0_0[f0input_3_1]  = 0bin11 THEN cascadef01_3_1[0bin11] = 0bin1 ELSE cascadef01_3_1[0bin11] = 0bin0 ENDIF );
cascadef23_3_1 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_3_1] @ LUTf0_2[f2input_3_1]  = 0bin00 THEN cascadef23_3_1[0bin00] = 0bin1 ELSE cascadef23_3_1[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_1] @ LUTf0_2[f2input_3_1]  = 0bin01 THEN cascadef23_3_1[0bin01] = 0bin1 ELSE cascadef23_3_1[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_1] @ LUTf0_2[f2input_3_1]  = 0bin10 THEN cascadef23_3_1[0bin10] = 0bin1 ELSE cascadef23_3_1[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_1] @ LUTf0_2[f2input_3_1]  = 0bin11 THEN cascadef23_3_1[0bin11] = 0bin1 ELSE cascadef23_3_1[0bin11] = 0bin0 ENDIF );
outf01_3_1, outf23_3_1: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_3_1] @ LUTf0_0[f0input_3_1]] = outf01_3_1 );
ASSERT(LUTf1_1[LUTf0_3[f3input_3_1] @ LUTf0_2[f2input_3_1]] = outf23_3_1 );
ASSERT( BVXOR( outf01_3_1, outf23_3_1 ) = 0bin1 );
f0input_3_2, f1input_3_2, f2input_3_2, f3input_3_2: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_3_2[0:0] = 0bin0) ELSE (f0input_3_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_3_2[1:1] = 0bin1) ELSE (f0input_3_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_3_2[0:0] = 0bin0) ELSE (f1input_3_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_3_2[1:1] = 0bin1) ELSE (f1input_3_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_3_2[0:0] = 0bin0) ELSE (f2input_3_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_3_2[1:1] = 0bin1) ELSE (f2input_3_2[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_3_2[0:0] = 0bin0) ELSE (f3input_3_2[0:0] = 0bin1)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_3_2[1:1] = 0bin1) ELSE (f3input_3_2[1:1] = 0bin0)  ENDIF );
cascadef01_3_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_3_2] @ LUTf0_0[f0input_3_2]  = 0bin00 THEN cascadef01_3_2[0bin00] = 0bin1 ELSE cascadef01_3_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_2] @ LUTf0_0[f0input_3_2]  = 0bin01 THEN cascadef01_3_2[0bin01] = 0bin1 ELSE cascadef01_3_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_2] @ LUTf0_0[f0input_3_2]  = 0bin10 THEN cascadef01_3_2[0bin10] = 0bin1 ELSE cascadef01_3_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_2] @ LUTf0_0[f0input_3_2]  = 0bin11 THEN cascadef01_3_2[0bin11] = 0bin1 ELSE cascadef01_3_2[0bin11] = 0bin0 ENDIF );
cascadef23_3_2 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_3_2] @ LUTf0_2[f2input_3_2]  = 0bin00 THEN cascadef23_3_2[0bin00] = 0bin1 ELSE cascadef23_3_2[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_2] @ LUTf0_2[f2input_3_2]  = 0bin01 THEN cascadef23_3_2[0bin01] = 0bin1 ELSE cascadef23_3_2[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_2] @ LUTf0_2[f2input_3_2]  = 0bin10 THEN cascadef23_3_2[0bin10] = 0bin1 ELSE cascadef23_3_2[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_2] @ LUTf0_2[f2input_3_2]  = 0bin11 THEN cascadef23_3_2[0bin11] = 0bin1 ELSE cascadef23_3_2[0bin11] = 0bin0 ENDIF );
outf01_3_2, outf23_3_2: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_3_2] @ LUTf0_0[f0input_3_2]] = outf01_3_2 );
ASSERT(LUTf1_1[LUTf0_3[f3input_3_2] @ LUTf0_2[f2input_3_2]] = outf23_3_2 );
ASSERT( BVXOR( outf01_3_2, outf23_3_2 ) = 0bin1 );
f0input_3_3, f1input_3_3, f2input_3_3, f3input_3_3: BITVECTOR(2);
ASSERT( IF f0type[0:0] = 0bin0 THEN  (f0input_3_3[0:0] = 0bin1) ELSE (f0input_3_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f0type[1:1] = 0bin0 THEN  (f0input_3_3[1:1] = 0bin1) ELSE (f0input_3_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f1type[0:0] = 0bin0 THEN  (f1input_3_3[0:0] = 0bin1) ELSE (f1input_3_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f1type[1:1] = 0bin0 THEN  (f1input_3_3[1:1] = 0bin1) ELSE (f1input_3_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f2type[0:0] = 0bin0 THEN  (f2input_3_3[0:0] = 0bin1) ELSE (f2input_3_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f2type[1:1] = 0bin0 THEN  (f2input_3_3[1:1] = 0bin1) ELSE (f2input_3_3[1:1] = 0bin0)  ENDIF );
ASSERT( IF f3type[0:0] = 0bin0 THEN  (f3input_3_3[0:0] = 0bin1) ELSE (f3input_3_3[0:0] = 0bin0)  ENDIF );
ASSERT( IF f3type[1:1] = 0bin0 THEN  (f3input_3_3[1:1] = 0bin1) ELSE (f3input_3_3[1:1] = 0bin0)  ENDIF );
cascadef01_3_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_1[f1input_3_3] @ LUTf0_0[f0input_3_3]  = 0bin00 THEN cascadef01_3_3[0bin00] = 0bin1 ELSE cascadef01_3_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_3] @ LUTf0_0[f0input_3_3]  = 0bin01 THEN cascadef01_3_3[0bin01] = 0bin1 ELSE cascadef01_3_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_3] @ LUTf0_0[f0input_3_3]  = 0bin10 THEN cascadef01_3_3[0bin10] = 0bin1 ELSE cascadef01_3_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_1[f1input_3_3] @ LUTf0_0[f0input_3_3]  = 0bin11 THEN cascadef01_3_3[0bin11] = 0bin1 ELSE cascadef01_3_3[0bin11] = 0bin0 ENDIF );
cascadef23_3_3 : ARRAY BITVECTOR(2) OF BITVECTOR(1);
ASSERT( IF LUTf0_3[f3input_3_3] @ LUTf0_2[f2input_3_3]  = 0bin00 THEN cascadef23_3_3[0bin00] = 0bin1 ELSE cascadef23_3_3[0bin00] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_3] @ LUTf0_2[f2input_3_3]  = 0bin01 THEN cascadef23_3_3[0bin01] = 0bin1 ELSE cascadef23_3_3[0bin01] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_3] @ LUTf0_2[f2input_3_3]  = 0bin10 THEN cascadef23_3_3[0bin10] = 0bin1 ELSE cascadef23_3_3[0bin10] = 0bin0 ENDIF );
ASSERT( IF LUTf0_3[f3input_3_3] @ LUTf0_2[f2input_3_3]  = 0bin11 THEN cascadef23_3_3[0bin11] = 0bin1 ELSE cascadef23_3_3[0bin11] = 0bin0 ENDIF );
outf01_3_3, outf23_3_3: BITVECTOR(1);
ASSERT(LUTf1_0[LUTf0_1[f1input_3_3] @ LUTf0_0[f0input_3_3]] = outf01_3_3 );
ASSERT(LUTf1_1[LUTf0_3[f3input_3_3] @ LUTf0_2[f2input_3_3]] = outf23_3_3 );
ASSERT( BVXOR( outf01_3_3, outf23_3_3 ) = 0bin1 );
cascadef01_3 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef01_3[0bin00] = BVPLUS( 4 , 0bin000@cascadef01_3_0[0bin00] , 0bin000@cascadef01_3_1[0bin00] , 0bin000@cascadef01_3_2[0bin00] , 0bin000@cascadef01_3_3[0bin00] ));
ASSERT( cascadef01_3[0bin01] = BVPLUS( 4 , 0bin000@cascadef01_3_0[0bin01] , 0bin000@cascadef01_3_1[0bin01] , 0bin000@cascadef01_3_2[0bin01] , 0bin000@cascadef01_3_3[0bin01] ));
ASSERT( cascadef01_3[0bin10] = BVPLUS( 4 , 0bin000@cascadef01_3_0[0bin10] , 0bin000@cascadef01_3_1[0bin10] , 0bin000@cascadef01_3_2[0bin10] , 0bin000@cascadef01_3_3[0bin10] ));
ASSERT( cascadef01_3[0bin11] = BVPLUS( 4 , 0bin000@cascadef01_3_0[0bin11] , 0bin000@cascadef01_3_1[0bin11] , 0bin000@cascadef01_3_2[0bin11] , 0bin000@cascadef01_3_3[0bin11] ));
cascadef23_3 : ARRAY BITVECTOR(2) OF BITVECTOR(4);
ASSERT( cascadef23_3[0bin00] = BVPLUS( 4 , 0bin000@cascadef23_3_0[0bin00] , 0bin000@cascadef23_3_1[0bin00] , 0bin000@cascadef23_3_2[0bin00] , 0bin000@cascadef23_3_3[0bin00] ));
ASSERT( cascadef23_3[0bin01] = BVPLUS( 4 , 0bin000@cascadef23_3_0[0bin01] , 0bin000@cascadef23_3_1[0bin01] , 0bin000@cascadef23_3_2[0bin01] , 0bin000@cascadef23_3_3[0bin01] ));
ASSERT( cascadef23_3[0bin10] = BVPLUS( 4 , 0bin000@cascadef23_3_0[0bin10] , 0bin000@cascadef23_3_1[0bin10] , 0bin000@cascadef23_3_2[0bin10] , 0bin000@cascadef23_3_3[0bin10] ));
ASSERT( cascadef23_3[0bin11] = BVPLUS( 4 , 0bin000@cascadef23_3_0[0bin11] , 0bin000@cascadef23_3_1[0bin11] , 0bin000@cascadef23_3_2[0bin11] , 0bin000@cascadef23_3_3[0bin11] ));
ASSERT( (cascadef01_0[0bin00] = cascadef01_1[0bin00]) AND (cascadef01_0[0bin00] = cascadef01_2[0bin00]) AND (cascadef01_0[0bin00] = cascadef01_3[0bin00])  );
ASSERT( (cascadef23_0[0bin00] = cascadef23_1[0bin00]) AND (cascadef23_0[0bin00] = cascadef23_2[0bin00]) AND (cascadef23_0[0bin00] = cascadef23_3[0bin00])  );
ASSERT( (cascadef01_0[0bin01] = cascadef01_1[0bin01]) AND (cascadef01_0[0bin01] = cascadef01_2[0bin01]) AND (cascadef01_0[0bin01] = cascadef01_3[0bin01])  );
ASSERT( (cascadef23_0[0bin01] = cascadef23_1[0bin01]) AND (cascadef23_0[0bin01] = cascadef23_2[0bin01]) AND (cascadef23_0[0bin01] = cascadef23_3[0bin01])  );
ASSERT( (cascadef01_0[0bin10] = cascadef01_1[0bin10]) AND (cascadef01_0[0bin10] = cascadef01_2[0bin10]) AND (cascadef01_0[0bin10] = cascadef01_3[0bin10])  );
ASSERT( (cascadef23_0[0bin10] = cascadef23_1[0bin10]) AND (cascadef23_0[0bin10] = cascadef23_2[0bin10]) AND (cascadef23_0[0bin10] = cascadef23_3[0bin10])  );
ASSERT( (cascadef01_0[0bin11] = cascadef01_1[0bin11]) AND (cascadef01_0[0bin11] = cascadef01_2[0bin11]) AND (cascadef01_0[0bin11] = cascadef01_3[0bin11])  );
ASSERT( (cascadef23_0[0bin11] = cascadef23_1[0bin11]) AND (cascadef23_0[0bin11] = cascadef23_2[0bin11]) AND (cascadef23_0[0bin11] = cascadef23_3[0bin11])  );
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf01_0_0 ,0bin000@outf01_0_1 ,0bin000@outf01_0_2 ,0bin000@outf01_0_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf23_0_0 ,0bin000@outf23_0_1 ,0bin000@outf23_0_2 ,0bin000@outf23_0_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf01_1_0 ,0bin000@outf01_1_1 ,0bin000@outf01_1_2 ,0bin000@outf01_1_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf23_1_0 ,0bin000@outf23_1_1 ,0bin000@outf23_1_2 ,0bin000@outf23_1_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf01_2_0 ,0bin000@outf01_2_1 ,0bin000@outf01_2_2 ,0bin000@outf01_2_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf23_2_0 ,0bin000@outf23_2_1 ,0bin000@outf23_2_2 ,0bin000@outf23_2_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf01_3_0 ,0bin000@outf01_3_1 ,0bin000@outf01_3_2 ,0bin000@outf01_3_3 ));
ASSERT( 0bin0010 = BVPLUS(4 ,0bin000@outf23_3_0 ,0bin000@outf23_3_1 ,0bin000@outf23_3_2 ,0bin000@outf23_3_3 ));
fy0_0, fy0_1, fy0_2, fy0_3, fy1_0, fy1_1 : BITVECTOR(4);
ASSERT(BVXOR(fy0_0[0:0], BVXOR(fy0_0[1:1]&0bin0, BVXOR(fy0_0[2:2]&0bin0, fy0_0[3:3]&0bin0&0bin0))) = LUTf0_0[0bin00]);
ASSERT(BVXOR(fy0_1[0:0], BVXOR(fy0_1[1:1]&0bin0, BVXOR(fy0_1[2:2]&0bin0, fy0_1[3:3]&0bin0&0bin0))) = LUTf0_1[0bin00]);
ASSERT(BVXOR(fy0_2[0:0], BVXOR(fy0_2[1:1]&0bin0, BVXOR(fy0_2[2:2]&0bin0, fy0_2[3:3]&0bin0&0bin0))) = LUTf0_2[0bin00]);
ASSERT(BVXOR(fy0_3[0:0], BVXOR(fy0_3[1:1]&0bin0, BVXOR(fy0_3[2:2]&0bin0, fy0_3[3:3]&0bin0&0bin0))) = LUTf0_3[0bin00]);
ASSERT(BVXOR(fy1_0[0:0], BVXOR(fy1_0[1:1]&0bin0, BVXOR(fy1_0[2:2]&0bin0, fy1_0[3:3]&0bin0&0bin0))) = LUTf1_0[0bin00]);
ASSERT(BVXOR(fy1_1[0:0], BVXOR(fy1_1[1:1]&0bin0, BVXOR(fy1_1[2:2]&0bin0, fy1_1[3:3]&0bin0&0bin0))) = LUTf1_1[0bin00]);
ASSERT(BVXOR(fy0_0[0:0], BVXOR(fy0_0[1:1]&0bin1, BVXOR(fy0_0[2:2]&0bin0, fy0_0[3:3]&0bin1&0bin0))) = LUTf0_0[0bin01]);
ASSERT(BVXOR(fy0_1[0:0], BVXOR(fy0_1[1:1]&0bin1, BVXOR(fy0_1[2:2]&0bin0, fy0_1[3:3]&0bin1&0bin0))) = LUTf0_1[0bin01]);
ASSERT(BVXOR(fy0_2[0:0], BVXOR(fy0_2[1:1]&0bin1, BVXOR(fy0_2[2:2]&0bin0, fy0_2[3:3]&0bin1&0bin0))) = LUTf0_2[0bin01]);
ASSERT(BVXOR(fy0_3[0:0], BVXOR(fy0_3[1:1]&0bin1, BVXOR(fy0_3[2:2]&0bin0, fy0_3[3:3]&0bin1&0bin0))) = LUTf0_3[0bin01]);
ASSERT(BVXOR(fy1_0[0:0], BVXOR(fy1_0[1:1]&0bin1, BVXOR(fy1_0[2:2]&0bin0, fy1_0[3:3]&0bin1&0bin0))) = LUTf1_0[0bin01]);
ASSERT(BVXOR(fy1_1[0:0], BVXOR(fy1_1[1:1]&0bin1, BVXOR(fy1_1[2:2]&0bin0, fy1_1[3:3]&0bin1&0bin0))) = LUTf1_1[0bin01]);
ASSERT(BVXOR(fy0_0[0:0], BVXOR(fy0_0[1:1]&0bin0, BVXOR(fy0_0[2:2]&0bin1, fy0_0[3:3]&0bin0&0bin1))) = LUTf0_0[0bin10]);
ASSERT(BVXOR(fy0_1[0:0], BVXOR(fy0_1[1:1]&0bin0, BVXOR(fy0_1[2:2]&0bin1, fy0_1[3:3]&0bin0&0bin1))) = LUTf0_1[0bin10]);
ASSERT(BVXOR(fy0_2[0:0], BVXOR(fy0_2[1:1]&0bin0, BVXOR(fy0_2[2:2]&0bin1, fy0_2[3:3]&0bin0&0bin1))) = LUTf0_2[0bin10]);
ASSERT(BVXOR(fy0_3[0:0], BVXOR(fy0_3[1:1]&0bin0, BVXOR(fy0_3[2:2]&0bin1, fy0_3[3:3]&0bin0&0bin1))) = LUTf0_3[0bin10]);
ASSERT(BVXOR(fy1_0[0:0], BVXOR(fy1_0[1:1]&0bin0, BVXOR(fy1_0[2:2]&0bin1, fy1_0[3:3]&0bin0&0bin1))) = LUTf1_0[0bin10]);
ASSERT(BVXOR(fy1_1[0:0], BVXOR(fy1_1[1:1]&0bin0, BVXOR(fy1_1[2:2]&0bin1, fy1_1[3:3]&0bin0&0bin1))) = LUTf1_1[0bin10]);
ASSERT(BVXOR(fy0_0[0:0], BVXOR(fy0_0[1:1]&0bin1, BVXOR(fy0_0[2:2]&0bin1, fy0_0[3:3]&0bin1&0bin1))) = LUTf0_0[0bin11]);
ASSERT(BVXOR(fy0_1[0:0], BVXOR(fy0_1[1:1]&0bin1, BVXOR(fy0_1[2:2]&0bin1, fy0_1[3:3]&0bin1&0bin1))) = LUTf0_1[0bin11]);
ASSERT(BVXOR(fy0_2[0:0], BVXOR(fy0_2[1:1]&0bin1, BVXOR(fy0_2[2:2]&0bin1, fy0_2[3:3]&0bin1&0bin1))) = LUTf0_2[0bin11]);
ASSERT(BVXOR(fy0_3[0:0], BVXOR(fy0_3[1:1]&0bin1, BVXOR(fy0_3[2:2]&0bin1, fy0_3[3:3]&0bin1&0bin1))) = LUTf0_3[0bin11]);
ASSERT(BVXOR(fy1_0[0:0], BVXOR(fy1_0[1:1]&0bin1, BVXOR(fy1_0[2:2]&0bin1, fy1_0[3:3]&0bin1&0bin1))) = LUTf1_0[0bin11]);
ASSERT(BVXOR(fy1_1[0:0], BVXOR(fy1_1[1:1]&0bin1, BVXOR(fy1_1[2:2]&0bin1, fy1_1[3:3]&0bin1&0bin1))) = LUTf1_1[0bin11]);

%%%%%AND gate%%%%%%%%%%%%%%%%%%%
ASSERT(fy1_0[3:3] = 0bin1);
ASSERT(fy1_1[3:3] = 0bin1);
ASSERT(fy1_0[2:2] = 0bin0);
ASSERT(fy1_1[2:2] = 0bin0);
ASSERT(fy1_1[1:1] = 0bin0);
ASSERT(fy1_1[1:1] = 0bin0);
ASSERT(fy1_0[0:0] = 0bin0);
ASSERT(fy1_1[0:0] = 0bin0);

%%%%%NAND gate%%%%%%%%%%%%%%%%%%%
%ASSERT(fy1_0[3:3] = 0bin0);
%ASSERT(fy1_1[3:3] = 0bin0);
%ASSERT(fy1_0[2:2] = 0bin1);
%ASSERT(fy1_1[2:2] = 0bin1);
%ASSERT(fy1_1[1:1] = 0bin1);
%ASSERT(fy1_1[1:1] = 0bin1);
%ASSERT(fy1_0[0:0] = 0bin1);
%ASSERT(fy1_1[0:0] = 0bin1);

QUERY(FALSE);
COUNTEREXAMPLE;
